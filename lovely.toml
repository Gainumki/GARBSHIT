[manifest]
version = "2.0"
dump_lua = true
priority = 27

# Objectively funnier returns (rerolling shop)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.reroll_shop = function(e)'''
position = "after"
payload = '''
jimboReturned()
'''
match_indent = true

# Objectively funnier returns (using card)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''  G.FUNCS.use_card = function(e, mute, nosave)'''
position = "after"
payload = '''
jimboReturned()
'''
match_indent = true

# Objectively funnier returns (selling joker)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''card:sell_card()'''
position = "before"
payload = '''
if card.config.center.set == 'Joker' then
jimboReturned()
end
'''
match_indent = true

# Objectively funnier returns (buying joker)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''local c1 = e.config.ref_table'''
position = "after"
payload = '''
if c1.config.center.set == 'Joker' and pseudorandom('ohheyitsthegun') > 0.80 and G.GAME.objectivelysold then
    card_transform(c1, "j_garb_objectively")
end
'''
match_indent = true

# Objectively funnier returns (starting blind)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.select_blind = function(e)'''
position = "after"
payload = '''
jimboReturned()
'''
match_indent = true

# Objectively funnier returns (skipping booster)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.skip_booster = function(e)'''
position = "after"
payload = '''
jimboReturned()
'''
match_indent = true

# Objectively funnier returns (skipping blind)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.skip_blind = function(e)'''
position = "after"
payload = '''
jimboReturned()
'''
match_indent = true


# Zoroark Fade Disguise
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''elseif context.end_of_round then'''
position = "before"
payload = '''
elseif context.starting_shop then
if self.disguised and self.disguised ~= self.config.center.key then 
    card_transform(self, self.disguised)
    card_eval_status_text(self, 'extra', nil, nil, nil, { message = "Faded!" })
end
'''
match_indent = true

# Zoroark Fade Disguise on bought
[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''local c1 = e.config.ref_table'''
position = "after"
payload = '''
if c1.disguised then
    card_transform(c1, c1.disguised)
    card_eval_status_text(c1, 'extra', nil, nil, nil, { message = "Faded!" })
end
'''
match_indent = true

# Giulis Score Debuffed Card
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''            card_eval_status_text(card, 'debuff')'''
position = "after"
payload = '''
if next(SMODS.find_card("j_garb_giulis")) then
    SMODS.score_card(card, context)
end
'''
match_indent = true

# Jimmy Calculations
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''-- context.final_scoring_step calculations'''
position = "before"
payload = '''
        if G.GAME.jimmies then
            for i = 1, #G.GAME.jimmies do
                local jimmy = G.GAME.jimmies[i]
                local ret = jimmy:calculate_partner({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, partner_main = true})
                if ret then
                    SMODS.trigger_effects({{individual = ret}}, jimmy)

                end
            end
        end
'''
match_indent = false
overwrite = false

# Archives cardarea
[[patches]]
[patches.pattern]
target = 'game.lua'
match_indent = true
position = 'before'
pattern = 'self.hand = CardArea('
payload = '''
G.garb_archived = CardArea(
	G.deck.T.x,
    G.deck.T.y,
	G.deck.T.w,
    G.deck.T.h,
  { type = "discard", card_limit = 1e100 }
)
'''

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'after'
pattern = 'G.deck.T.y = G.TILE_H - G.deck.T.h'
payload = '''
G.garb_archived.T.x = G.TILE_W - G.deck.T.w - 0.5
G.garb_archived.T.y = G.TILE_H - G.deck.T.h
'''

# Poker Hand display can have enhancements
# This patch was made by MathIsFun0
# https://github.com/MathIsFun0/Cryptid/blob/00bdde94b2aa4554147c65a792d404585dde167c/lovely/Misc.toml#L394
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS[v.enhancement or 'c_base'])'''
position = "at"
payload = '''local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS[v[3] or 'c_base'])'''
match_indent = true

# Valoky Tags
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.round_resets.blind_tags.Small = get_next_tag_key()"
position = "at"
payload = '''
G.GAME.round_resets.blind_tags.Small = next(SMODS.find_card("j_garb_valoky")) and 'tag_garb_carnival' or get_next_tag_key() 
'''
match_indent = true
times = 1
overwrite = true

# Fix Tags
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if G.FORCE_TAG then return G.FORCE_TAG end"
position = "before"
payload = '''
G.FORCE_TAG = G.GAME.hivemind_stage and (G.GAME.hivemind_stage > 3) and "tag_standard" or nil
'''
match_indent = true
times = 1

# Fix the Hive
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.select_blind = function(e)"
position = "after"
payload = '''
if G.SETTINGS.HIVE then

    G.SETTINGS.HIVE = false
    G.GAME.HIVE = true
    G:save_progress()
    G.FILE_HANDLER.force = true

    for i = 1, 200 do
        local xpos = G.play.T.x + pseudorandom("pos", -5, 20)
        local ypos = G.play.T.y + pseudorandom("pos", -5, 20)
        local _card = Card(xpos-G.CARD_W*0.6, ypos-G.CARD_H*1.6, G.CARD_W, G.CARD_H, G.P_CARDS.empty, G.P_CENTERS.j_garb_hiveSCARE)
        _card:start_materialize()
    end

    play_sound('garb_honk', 1, 0.8)

    play_sound('garb_infect', 0.4 + math.random()*0.1, 0.8)
    play_sound('garb_infect', 0.4 + math.random()*0.1, 0.8)
    play_sound('garb_infect', 0.4 + math.random()*0.1, 0.8)
    play_sound('garb_infect', 0.4 + math.random()*0.1, 0.8)


    G.E_MANAGER:add_event(Event({trigger = "after", delay = 5, func = function()
        G.STATE = G.STATES.GAME_OVER; G.STATE_COMPLETE = false
        love.event.quit()
    return true end}))
end
'''
match_indent = true
times = 1


# The Seat Apparition
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.reroll_shop = function(e)'''
position = "after"
payload = '''
if pseudorandom('ohheyitstheseat') < 1/500 then
    local new_card = SMODS.create_card{key = "j_garb_seat", no_edition = true}
    new_card:add_to_deck()
    G.jokers:emplace(new_card)
    new_card:start_materialize()
    play_sound('timpani')
    card_eval_status_text(new_card, "extra", nil, nil, nil, {message = "???", colour = G.C.DARK_EDITION})
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''badges[#badges + 1] = create_badge(((card.ability.name == 'Pluto' or card.ability.name == 'Ceres' or card.ability.name == 'Eris') and localize('k_dwarf_planet')) or (card.ability.name == 'Planet X' and localize('k_planet_q') or card_type),card_type_colour, nil, 1.2)'''
position = "at"
payload = '''
badges[#badges + 1] = create_badge(((card.ability.name == 'Pluto' or card.ability.name == 'Ceres' or card.ability.name == 'Eris') and localize('k_dwarf_planet')) or (card.ability.name == 'Planet X' and localize('k_planet_q') or (card.config.center.key == 'j_garb_seat' and "???") or card_type),card_type_colour, nil, 1.2)
'''
match_indent = true



# Golden Carrot
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local rarity = _rarity or SMODS.poll_rarity("Joker", 'rarity'..G.GAME.round_resets.ante..(_append or ''))'''
position = "after"
payload = '''
if G.jokers and next(SMODS.find_card("j_garb_goldcarrot")) and _type == 'Joker' then
    for i = 1, (3*#SMODS.find_card("j_garb_goldcarrot")) do
        if rarity < 3 then
            rarity = SMODS.poll_rarity("Joker", 'rarity'..G.GAME.round_resets.ante..(_append or ''))
        end
    end
end
'''
match_indent = true

# Backtrack
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.GAME.skips = (G.GAME.skips or 0) + 1
'''
position = "after"
payload = '''
if next(SMODS.find_card("j_garb_backtrack")) then
        G.E_MANAGER:add_event(Event({
          trigger = 'before', delay = 0.2,
          func = function()
            G.blind_prompt_box.alignment.offset.y = -10
            G.blind_select.alignment.offset.y = 40
            G.blind_select.alignment.offset.x = 0
            return true
        end}))
    G.E_MANAGER:add_event(Event({
        trigger = "immediate",
        func = function()
            G.GAME.current_round.jokers_purchased = 0
            G.STATE = G.STATES.SHOP
            G.STATE_COMPLETE = false

            G.GAME.shop_free = nil
            G.GAME.shop_d6ed = nil
            G.GAME.current_round.used_packs = {}

            G.blind_select:remove()
            G.blind_prompt_box:remove()
            G.blind_select = nil
            delay(0.2)    
            return true
            end,
        }))
end
'''
match_indent = true
times = 1

# Title Screen - Colors
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = '''
RENTAL = HEX('b18f43'),
'''
position = "after"
payload = '''
GARB_T1 = HEX("FF87DB"),
GARB_T2 = HEX("B670D8"),
'''
match_indent = true
times = 1

# Temp Hands - Defined
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "temp_handsize = nil,"
position = "after"
payload = '''
temp_hands = nil,
'''
match_indent = true

# Temp Hands
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.temp_handsize then G.hand:change_size(-G.GAME.round_resets.temp_handsize); G.GAME.round_resets.temp_handsize = nil end"
position = "after"
payload = '''
if G.GAME.round_resets.temp_hands then G.GAME.round_resets.hands = G.GAME.round_resets.hands - G.GAME.round_resets.temp_hands; G.GAME.round_resets.temp_hands = nil end
'''
match_indent = true

# Temp Discards
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.temp_handsize then G.hand:change_size(-G.GAME.round_resets.temp_handsize); G.GAME.round_resets.temp_handsize = nil end"
position = "after"
payload = '''
if G.GAME.round_resets.temp_discards then G.GAME.round_resets.discards = G.GAME.round_resets.discards - G.GAME.round_resets.temp_discards; G.GAME.round_resets.temp_discards = nil end
'''
match_indent = true

# Tangerine Deck - Probabilities
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if G.GAME.selected_back and G.GAME.selected_back.effect.center.key == "b_garb_garbdeck" or 
    (G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_garb_tangerine") then
    if string.sub(v.key, 1, 6) == 'j_garb' then
        for i=1, 2 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end

if G.GAME.selected_back and G.GAME.selected_back.effect.center.key == "b_garb_garbdeck" and 
    (G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_garb_tangerine") then
    if string.sub(v.key, 1, 6) == 'j_garb' then
        for i=1, 32 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
'''
match_indent = true

# Colorful Joker - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
    local suit_jokers = {"j_greedy_joker", "j_lusty_joker", "j_wrathful_joker", "j_gluttenous_joker"}
    local have_jokers = {}
    for i = 1, #suit_jokers do
        if self.config.center.key == suit_jokers[i] then
            for m = 1, #suit_jokers do
                if m ~= i then
                    if next(SMODS.find_card(suit_jokers[m])) then have_jokers[m] = suit_jokers[i] else have_jokers = {} end
                end  
            end
        end
        if #have_jokers == 3 then
            check_for_unlock({ type = "colorful_jonk" })
        end
    end
    '''
match_indent = false
overwrite = false

# Two of Cups - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
    local vteller_jokers = {"j_fortune_teller", "j_vagabond"}
    local v_have_jokers = {}
    for i = 1, #vteller_jokers do
        if self.config.center.key == vteller_jokers[i] then
            for m = 1, #vteller_jokers do
                if m ~= i then
                    if next(SMODS.find_card(vteller_jokers[m])) then v_have_jokers[m] = vteller_jokers[i] else v_have_jokers = {} end
                end  
            end
        end
        if #v_have_jokers == 1 then
            check_for_unlock({ type = "vteller" })
        end
    end
    '''
match_indent = false
overwrite = false


# Black Hole - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Black Hole' then"
position = "after"
payload = '''check_for_unlock({ type = "black_hole" })'''
match_indent = true
overwrite = false

# Quadrant Hands - Telescope
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if _hand then"
position = "before"
payload = '''
local quadrant_hands = {"garb_blush", "garb_caliginous", "garb_ashen", "garb_pale"}
for i = 1, #quadrant_hands do
    if _hand == quadrant_hands[i] then _hand = "Flush" end
end
'''
match_indent = true
overwrite = false

# Quadrant Hands - Blue Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')"
position = "before"
payload = '''
local quadrant_hands = {"garb_blush", "garb_caliginous", "garb_ashen", "garb_pale"}
for i = 1, #quadrant_hands do
    if G.GAME.last_hand_played == quadrant_hands[i] then _planet = "c_jupiter" end
end
'''
match_indent = true
overwrite = false

# Angel of Salt - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for i = 1, self.ability.extra.destroy do destroyed_cards[#destroyed_cards+1] = temp_hand[i] end"
position = "after"
payload = '''
            local stones = {}
            for i = 1, #destroyed_cards do if destroyed_cards[i].ability.name == 'Stone Card' then stones[#stones+1] = destroyed_cards[i] end end
            if #stones == 5 then check_for_unlock({ type = "salt" }) end
'''
match_indent = true
overwrite = false

# Title Screen - Cryptid Compatibility
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)"
position = "at"
payload = '''
if next(SMODS.find_mod("Cryptid")) then
    replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
elseif config.title then
	replace_card = SMODS.create_card({
		set = "Joker",
		area = G.title_top,
		key = "j_garb_ratboyTITLE",
		no_edition = true
	})
    replace_card.T.scale = 1.32
else 
    replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
end
'''
match_indent = true
overwrite = true

# Splash - THE SURGE
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"

position = "at"
payload = '''
if config.title then
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_garb_surgeTITLE'])
else
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])
end
'''
match_indent = true
overwrite = true